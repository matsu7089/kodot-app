---
import { dayjs } from '@/utils'
import { type PrimaryColor, dateFormat } from '@/siteConfig'
import '@fontsource/m-plus-1-code'

import BaseLayout from '@/layouts/BaseLayout.astro'
import PixelContainer from '@/components/PixelContainer.astro'
import IconLabel from '@/components/IconLabel.astro'
import type { MarkdownHeading } from 'astro'

export type Props = {
  headings: Array<MarkdownHeading>
  frontmatter: Record<string, any>
  primaryColor: PrimaryColor
}

const { headings, frontmatter, primaryColor } = Astro.props

const filteredHeadings = headings.filter(({ depth }) => depth <= 2)

const { title, pubDate, lastModified, godotVersion, author } = frontmatter

const pubDateText = dayjs(pubDate).format(dateFormat)

const modifiedDateText = (() => {
  const dateText = dayjs(lastModified).tz().format(dateFormat)
  return dateText === pubDateText ? undefined : dateText
})()

const versionText = godotVersion ? 'v' + godotVersion : undefined
---

<BaseLayout primaryColor={primaryColor}>
  <div class="flex flex-wrap m-4">
    <PixelContainer class="flex-1 min-w-0 p-4">
      <img
        class="w-full h-40 md:h-60 lg:h-80 xl:h-96 object-cover"
        src="/800x450.png"
        alt="Card image"
      />
      <div class="flex flex-col items-center">
        <div class="text-2xl font-bold mt-6">{title}</div>
        <div class="mt-4 flex flex-wrap items-center font-pixelify space-x-4">
          <IconLabel name="clock" primaryColor={primaryColor}>
            {pubDateText}
          </IconLabel>
          {
            modifiedDateText && (
              <IconLabel name="updated" primaryColor={primaryColor}>
                {modifiedDateText}
              </IconLabel>
            )
          }
          {
            versionText && (
              <IconLabel name="kodot-solid" primaryColor={primaryColor}>
                {versionText}
              </IconLabel>
            )
          }
          {
            author && (
              <IconLabel
                class="font-sans"
                name="pen"
                primaryColor={primaryColor}
              >
                {author}
              </IconLabel>
            )
          }
        </div>
      </div>
      <div class:list={['mt-4 markdown', primaryColor]}>
        <slot />
      </div>
    </PixelContainer>
    <PixelContainer
      class="w-60 ml-4 self-start sticky top-4 max-h-[calc(100vh-theme(spacing.8))] overflow-y-auto hidden lg:block"
    >
      <div class="p-4">
        <span>目次</span>
        <ul class="mt-4 list-square pl-4 leading-tight">
          {
            filteredHeadings.map(({ slug, text }) => (
              <li class="[&:not(:first-child)]:mt-1">
                <a
                  class={
                    primaryColor === 'blue'
                      ? 'hover:text-kodot-blue'
                      : 'hover:text-kodot-green'
                  }
                  href={'#' + slug}
                >
                  {text}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </PixelContainer>
  </div>
</BaseLayout>

<!-- ref: https://timneubauer.dev/blog/copy-code-button-in-astro/ -->
<script is:inline>
  const copyButtonLabel = 'Copy'
  const codeBlocks = Array.from(document.querySelectorAll('pre'))

  for (let codeBlock of codeBlocks) {
    const wrapper = document.createElement('div')
    wrapper.style.position = 'relative'

    const copyButton = document.createElement('button')
    copyButton.className = 'copy-code'
    copyButton.innerHTML = copyButtonLabel

    codeBlock.setAttribute('tabindex', '0')
    codeBlock.appendChild(copyButton)

    codeBlock.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)

    copyButton.addEventListener('click', async () => {
      await copyCode(codeBlock, copyButton)
    })
  }

  async function copyCode(block, button) {
    let code = block.querySelector('code')
    let text = code.innerText

    await navigator.clipboard.writeText(text)

    button.innerText = 'Copied !'

    setTimeout(() => {
      button.innerText = copyButtonLabel
    }, 700)
  }
</script>

<style>
  /* ref: https://github.com/iandinwoodie/github-markdown-tailwindcss/ */
  .py-05 {
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
  }

  .markdown {
    @apply text-gray-900 leading-normal break-words;
  }

  :global(.dark) .markdown {
    @apply text-gh-dimmed-text;
  }

  .markdown > :global(* + *) {
    @apply mt-0 mb-4;
  }

  .markdown :global(li + li) {
    @apply mt-1;
  }

  .markdown :global(li) > :global(p + p) {
    @apply mt-6;
  }

  .markdown :global(strong) {
    @apply font-semibold;
  }

  .markdown :global(a) {
    @apply text-kodot-blue font-semibold hover:underline;
  }
  .markdown.green :global(a) {
    @apply text-kodot-green;
  }

  .markdown :global(strong) :global(a) {
    @apply font-bold;
  }

  .markdown :global(h1) {
    @apply leading-tight border-b text-4xl font-semibold mb-4 mt-6 pb-2;
  }

  .markdown :global(h2) {
    @apply leading-tight border-b text-2xl font-semibold mb-4 mt-6 pb-2;
  }

  .markdown :global(h3) {
    @apply leading-snug text-lg font-semibold mb-4 mt-6;
  }

  .markdown :global(h4) {
    @apply leading-none text-base font-semibold mb-4 mt-6;
  }

  .markdown :global(h5) {
    @apply leading-tight text-sm font-semibold mb-4 mt-6;
  }

  .markdown :global(h6) {
    @apply leading-tight text-sm font-semibold text-gray-600 mb-4 mt-6;
  }

  .markdown :global(blockquote) {
    @apply text-base border-l-4 border-gray-300 pl-4 pr-4 text-gray-600;
  }

  .markdown :global(.remark-code-title) {
    @apply text-sm px-5;
    font-family: 'M PLUS 1 Code', sans-serif;
  }

  .markdown :global(code) {
    @apply text-sm inline bg-gray-200 rounded px-1 py-05;
    font-family: 'M PLUS 1 Code', sans-serif;
  }

  .markdown :global(pre) {
    @apply !bg-[#2d333b] p-4;
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2zm1,2h-1v2h2v-2z' fill='rgb(45,51,59)' /></svg>")
      2;
    background-clip: padding-box;
  }

  .markdown :global(pre) :global(code) {
    @apply block bg-transparent p-0 overflow-visible rounded-none;
  }

  .markdown :global(ul) {
    @apply text-base pl-8 list-square;
  }

  .markdown :global(ol) {
    @apply text-base pl-8 list-decimal;
  }

  .markdown :global(kbd) {
    @apply text-xs inline-block rounded border px-1 py-05 align-middle font-normal font-mono shadow;
  }

  .markdown :global(table) {
    @apply text-base border-gray-600;
  }

  .markdown :global(th) {
    @apply border py-1 px-3;
  }

  .markdown :global(td) {
    @apply border py-1 px-3;
  }

  /* ref: https://github.com/gladevise/remark-link-card */
  .markdown :global(.rlc-container) {
    @apply w-full xl:max-h-[120px] mx-auto text-gray-900 flex
           hover:-translate-x-0.5 hover:-translate-y-0.5 hover:no-underline;

    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2zm1,2h-1v2h2v-2z' fill='rgb(17,24,39)' /></svg>")
      2;
  }

  :global(.dark) .markdown :global(.rlc-container) {
    @apply text-gh-dimmed-text;
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2zm1,2h-1v2h2v-2z' fill='rgb(173,186,199)' /></svg>");
  }

  .markdown :global(.rlc-info) {
    @apply overflow-hidden p-4 flex-[4_1_100px] text-left flex flex-col justify-between
           border-r-4 border-gray-900;
  }

  :global(.dark) .markdown :global(.rlc-info) {
    @apply border-gh-dimmed-text;
  }

  .markdown :global(.rlc-title) {
    @apply text-xl line-clamp-2 xl:line-clamp-1;
  }

  .markdown :global(.rlc-description) {
    @apply text-sm text-gray-500 whitespace-nowrap overflow-hidden overflow-ellipsis mt-1;
  }

  .markdown :global(.rlc-url-container) {
    @apply text-sm text-gray-500 flex items-center mt-1;
  }

  .markdown :global(.rlc-favicon) {
    @apply mr-2 w-4 h-4;
  }

  .markdown :global(.rlc-url) {
    @apply text-sm overflow-ellipsis whitespace-nowrap overflow-hidden;
  }

  .markdown :global(.rlc-image-container) {
    @apply relative flex-[1_1_100px];
  }

  .markdown :global(.rlc-image) {
    @apply object-cover w-full h-full;
  }

  /* ref: https://github.com/ipikuka/remark-flexible-containers */
  .markdown :global(.remark-container) {
    @apply border-l-4 border-kodot-blue py-2 px-4;
  }
  .markdown :global(.remark-container > *):not(:last-child) {
    @apply mt-0 mb-4;
  }

  .markdown :global(.remark-container > .remark-container-title) {
    @apply text-kodot-blue text-base;
  }
  .markdown :global(.remark-container > .remark-container-title)::before {
    content: '';
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0,0,16,16'><path d='m5,1h6v1h1v1h1v1h1v1h1v6h-1v1h-1v1h-1v1h-1v1h-6v-1h-1v-1h-1v-1h-1v-1h-1v-6h1v-1h1v-1h1v-1h1zm3,3h-1v2h2v-2zm0,3h-1v5h2v-5z' fill='rgb(71,140,191)'/></svg>");
    @apply inline-block w-4 h-4 mr-2 bg-[0px_1px] bg-no-repeat;
  }

  .markdown :global(.remark-container.warning) {
    @apply border-[#bf7b47];
  }
  .markdown :global(.remark-container.warning > .remark-container-title) {
    @apply text-[#bf7b47];
  }
  .markdown
    :global(.remark-container.warning > .remark-container-title)::before {
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0,0,16,16'><path d='m7,1h2v1h1v2h1v2h1v2h1v2h1v2h1v2h-1v1h-12v-1h-1v-2h1v-2h1v-2h1v-2h1v-2h1v-2h1zm1,4h-1v5h2v-5zm0,6h-1v2h2v-2z' fill='rgb(191,123,71)'/></svg>");
  }

  .markdown :global(.remark-container.caution) {
    @apply border-[#bf474f];
  }
  .markdown :global(.remark-container.caution > .remark-container-title) {
    @apply text-[#bf474f];
  }
  .markdown
    :global(.remark-container.caution > .remark-container-title)::before {
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0,0,16,16'><path d='m5,1h6v1h1v1h1v1h1v1h1v6h-1v1h-1v1h-1v1h-1v1h-6v-1h-1v-1h-1v-1h-1v-1h-1v-6h1v-1h1v-1h1v-1h1zm3,3h-1v5h2v-5zm0,6h-1v2h2v-2z' fill='rgb(191,71,79)'/></svg>");
  }

  /* ref: https://timneubauer.dev/blog/copy-code-button-in-astro/ */
  .markdown :global(.copy-code) {
    @apply absolute top-0 right-0 py-1 px-2 text-lg leading-4 font-pixelify;
  }

  /* remark-mermaid */
  .markdown :global(.remark-mermaid) {
    background-color: #2d333b;
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2zm1,2h-1v2h2v-2z' fill='rgb(45,51,59)' /></svg>")
      2;
    background-clip: padding-box;
  }

  .markdown :global(.remark-mermaid > svg) {
    @apply m-auto;
  }
</style>
