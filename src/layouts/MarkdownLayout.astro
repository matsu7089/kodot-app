---
import { dayjs, strToHSL, type MarkdownCollectionKey } from '@/utils'
import { type PrimaryColor, dateFormat } from '@/siteConfig'
import '@fontsource-variable/jetbrains-mono'

import { Image } from 'astro:assets'
import { getEntry, type InferEntrySchema } from 'astro:content'
import Icon from '@/components/Icon.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'
import PixelContainer from '@/components/PixelContainer.astro'
import IconLabel from '@/components/IconLabel.astro'
import TagChip from '@/components/TagChip.astro'
import type { Props as SeoHeadProps } from '@/components/SeoHead.astro'
import type { MarkdownHeading } from 'astro'

export type Props = {
  headings: Array<MarkdownHeading>
  frontmatter: Record<string, any>
  primaryColor?: PrimaryColor
  collection?: MarkdownCollectionKey
  seoHeadProps?: SeoHeadProps
}

const {
  headings,
  frontmatter,
  primaryColor = 'blue',
  collection = '',
  seoHeadProps = {
    title: frontmatter.title,
  },
} = Astro.props

const {
  title,
  pubDate,
  lastModified,
  godotVersion,
  author,
  tags,
  cover,
  isDraft,
} = frontmatter

const pubDateText = dayjs(pubDate).format(dateFormat)

const modifiedDateText = (() => {
  const dateText = dayjs(lastModified).tz().format(dateFormat)
  return dateText === pubDateText ? undefined : dateText
})()

const versionText = godotVersion ? 'v' + godotVersion : undefined

const minDepth = Math.min(...headings.map((heading) => heading.depth))

const authorData: InferEntrySchema<'authors'> | undefined = author
  ? (await getEntry('authors', author))?.data
  : undefined

const avatarImage = author
  ? (
      await import(`../../content/authors/avatars/${author}.png`).catch(
        () => {}
      )
    )?.default
  : undefined

const avatarColor = strToHSL(author, 70, 75)
const coverBackgroundColor = strToHSL(title, 70, 75)
---

<BaseLayout primaryColor={primaryColor} seoHeadProps={seoHeadProps}>
  <div class="flex flex-col lg:flex-row m-4">
    <PixelContainer
      class="flex-1 min-w-0 p-4 lg:mr-4"
      data-pagefind-body
      data-pagefind-filter={`collection:${collection}`}
    >
      {
        cover ? (
          <div class="relative w-full h-40 md:h-60 lg:h-80 xl:h-96 overflow-hidden">
            <Image
              class="absolute top-0 left-0 w-full h-full object-cover blur-xl"
              alt="Cover background image"
              src={cover}
            />
            <Image
              class="relative top-1/2 left-1/2 translate-x-[-50%] translate-y-[-50%] w-full h-full object-contain"
              alt="Cover foreground image"
              src={cover}
              data-pagefind-meta="image[src]"
            />
          </div>
        ) : (
          <div
            class="w-full h-40 md:h-60 flex justify-center items-center"
            style={{ backgroundColor: coverBackgroundColor }}
            data-pagefind-meta="image:"
          >
            <Icon name="kodot-solid" class="text-white h-1/3 w-1/3" />
          </div>
        )
      }
      <div class="flex flex-col items-center my-12">
        <h1 class="text-2xl font-bold" data-pagefind-meta="title">
          {title}
        </h1>
        <div
          class="mt-6 flex flex-wrap items-center font-ps2 text-[10px] space-x-4"
        >
          {isDraft && <span class="px-2 text-white bg-kodot-blue">Draft</span>}
          <IconLabel
            name="clock"
            primaryColor={primaryColor}
            labelClass="pt-[2px]"
          >
            {pubDateText}
          </IconLabel>
          {
            modifiedDateText && (
              <IconLabel
                name="updated"
                primaryColor={primaryColor}
                labelClass="pt-[2px]"
              >
                {modifiedDateText}
              </IconLabel>
            )
          }
          {
            versionText && (
              <IconLabel
                name="kodot-solid"
                primaryColor={primaryColor}
                labelClass="pt-[2px]"
              >
                {versionText}
              </IconLabel>
            )
          }
        </div>
      </div>
      <div class:list={['mt-4 markdown', primaryColor]}>
        <slot />
      </div>
    </PixelContainer>
    <div
      class="w-full lg:w-72 self-start sticky top-4 overflow-y-auto space-y-4 lg:max-h-[calc(100vh-2rem)]"
    >
      <PixelContainer class="hidden lg:block">
        <div class="p-4">
          <IconLabel name="dog" isLargeIcon class="text-sm font-ps2"
            >Contents</IconLabel
          >
          <ul class="mt-4 list-square pl-4 leading-tight">
            {
              headings.map(({ depth, slug, text }) => (
                <li
                  class:list={['space-y-1 toc', primaryColor]}
                  style={{ marginLeft: `${(depth - minDepth) * 8}px` }}
                >
                  <a
                    class={
                      primaryColor === 'blue'
                        ? 'hover:text-kodot-blue'
                        : 'hover:text-kodot-green'
                    }
                    href={'#' + slug}
                  >
                    {text}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </PixelContainer>
      {
        tags?.length > 0 && (
          <PixelContainer>
            <div class="p-4">
              <IconLabel name="clownfish" isLargeIcon class="text-sm font-ps2">
                Tags
              </IconLabel>
              <div class="mt-4 flex flex-wrap gap-1">
                {tags.map((tag: string) => (
                  <TagChip label={tag} />
                ))}
              </div>
            </div>
          </PixelContainer>
        )
      }
      {
        author && (
          <PixelContainer>
            <div class="p-4">
              <IconLabel name="pigeon" isLargeIcon class="text-sm font-ps2">
                Author
              </IconLabel>
              <div class="mt-4 flex items-center space-x-4">
                <div>
                  <div class="avatar">
                    {avatarImage ? (
                      <Image src={avatarImage} alt="Author image" />
                    ) : (
                      <Icon name="kodot-solid" style={{ color: avatarColor }} />
                    )}
                  </div>
                </div>
                <div>
                  <span class="break-all">
                    {authorData?.displayName || author}
                  </span>
                  {authorData && (
                    <div
                      class:list={[
                        'flex space-x-2 mt-1 mb-2',
                        primaryColor === 'blue'
                          ? 'text-kodot-blue'
                          : 'text-kodot-green',
                      ]}
                    >
                      {authorData.github && (
                        <a
                          href={`https://github.com/${authorData.github}`}
                          rel="nofollow noopener noreferrer"
                          target="_blank"
                        >
                          <Icon name="github" class="w-5 h-5" />
                        </a>
                      )}

                      {authorData.twitter && (
                        <a
                          href={`https://x.com/${authorData.twitter}`}
                          rel="nofollow noopener noreferrer"
                          target="_blank"
                        >
                          <Icon name="twitter" class="w-5 h-5" />
                        </a>
                      )}

                      {authorData.website && (
                        <a
                          href={authorData.website}
                          rel="nofollow noopener noreferrer"
                          target="_blank"
                        >
                          <Icon name="house" class="w-5 h-5" />
                        </a>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </PixelContainer>
        )
      }
    </div>
  </div>
</BaseLayout>

<!-- ref: https://timneubauer.dev/blog/copy-code-button-in-astro/ -->
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtonLabel = 'Copy'
    const codeBlocks = Array.from(document.querySelectorAll('pre'))

    for (let codeBlock of codeBlocks) {
      const wrapper = document.createElement('div')
      wrapper.style.position = 'relative'

      const copyButton = document.createElement('button')
      copyButton.className = 'copy-code'
      copyButton.innerHTML = copyButtonLabel

      codeBlock.setAttribute('tabindex', '0')
      codeBlock.appendChild(copyButton)

      codeBlock.parentNode?.insertBefore(wrapper, codeBlock)
      wrapper.appendChild(codeBlock)

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton)
      })
    }

    async function copyCode(block, button) {
      let code = block.querySelector('code')
      let text = code.innerText

      await navigator.clipboard.writeText(text)

      button.innerText = 'Copied!'

      setTimeout(() => {
        button.innerText = copyButtonLabel
      }, 700)
    }
  })
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc')
    const sections = document
      .querySelector('.markdown')
      .querySelectorAll('h1,h2,h3,h4,h5,h6')

    let lastActiveIndex = -1

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const index = Array.from(sections).indexOf(entry.target)

          if (index === -1 || !entry.isIntersecting) {
            return
          }

          if (lastActiveIndex !== -1) {
            tocLinks[lastActiveIndex].classList.remove('active')
          }

          tocLinks[index].classList.add('active')
          lastActiveIndex = index
        })
      },
      { threshold: 0, rootMargin: '0px 0px -95% 0px' }
    )

    sections.forEach((section) => {
      observer.observe(section)
    })
  })
</script>

<style>
  li.toc.active {
    @apply text-kodot-blue;
  }
  li.green.toc.active {
    @apply text-kodot-green;
  }

  .avatar {
    @apply w-12 h-12;
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(45,51,59)' /></svg>")
      2;
    background-clip: padding-box;
  }
  :global(.dark) .avatar {
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(173,186,199)' /></svg>");
  }

  /* ref: https://github.com/iandinwoodie/github-markdown-tailwindcss/ */
  .py-05 {
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
  }

  .markdown {
    @apply text-gray-900 leading-normal break-words;
  }

  :global(.dark) .markdown {
    @apply text-gh-dimmed-text;
  }

  .markdown > :global(* + *) {
    @apply mt-0 mb-4;
  }

  .markdown :global(li + li) {
    @apply mt-1;
  }

  .markdown :global(li) > :global(p + p) {
    @apply mt-6;
  }

  .markdown :global(strong) {
    @apply font-semibold;
  }

  .markdown :global(a) {
    @apply text-kodot-blue font-semibold hover:underline;
  }
  .markdown.green :global(a) {
    @apply text-kodot-green;
  }

  .markdown :global(strong) :global(a) {
    @apply font-bold;
  }

  .markdown :global(a.header-anchor)::before {
    content: '#';
    margin-right: 0.25rem;
  }

  .markdown :global(h1) {
    @apply leading-tight border-b text-3xl font-semibold mb-6 mt-12 pb-2;
  }

  .markdown :global(h2) {
    @apply leading-tight border-b text-2xl font-semibold mb-6 mt-12 pb-2;
  }

  .markdown :global(h3) {
    @apply leading-snug text-lg font-semibold mb-6 mt-12;
  }

  .markdown :global(h4) {
    @apply leading-none text-base font-semibold mb-6 mt-12;
  }

  .markdown :global(h5) {
    @apply leading-tight text-sm font-semibold mb-6 mt-12;
  }

  .markdown :global(h6) {
    @apply leading-tight text-sm font-semibold text-gray-600 mb-6 mt-12;
  }

  .markdown :global(blockquote) {
    @apply text-base border-l-4 border-gray-300 pl-4 pr-4 text-gray-600;
  }

  .markdown :global(.remark-code-title) {
    @apply text-sm mx-2 px-2 text-white w-fit bg-kodot-blue;
    font-family: 'JetBrains Mono Variable', 'BIZ UDPGothic', monospace;
    font-variant-ligatures: none;
    border-width: 4px 4px 0;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(45,51,59)' /></svg>")
      2;
    background-clip: padding-box;
  }
  .markdown.green :global(.remark-code-title) {
    @apply bg-kodot-green;
  }
  :global(.dark) .markdown :global(.remark-code-title) {
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(173,186,199)' /></svg>");
  }

  .markdown :global(code) {
    @apply text-sm inline bg-gray-200 rounded px-1 py-05 rotate-aa;
    font-family: 'JetBrains Mono Variable', 'BIZ UDPGothic', monospace;
    font-variant-ligatures: none;
  }

  :global(.dark) .markdown :global(code) {
    @apply bg-gray-700;
  }

  .markdown :global(pre) {
    @apply !bg-[#2d333b] py-4;
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(45,51,59)' /></svg>")
      2;
    background-clip: padding-box;
  }
  :global(.dark) .markdown :global(pre) {
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(173,186,199)' /></svg>");
  }

  .markdown :global(pre > code) {
    @apply block bg-transparent p-0 overflow-visible rounded-none w-fit min-w-full;
  }
  :global(.dark) .markdown :global(pre > code) {
    @apply bg-transparent;
  }

  .markdown :global(code > span.line) {
    @apply px-4 inline-block w-full;
  }

  .markdown :global(code > span.line.highlighted) {
    background-color: rgba(101, 117, 133, 0.16);
  }

  .markdown :global(code > span.line.diff) {
    position: relative;
    background-color: rgba(2, 150, 101, 0.16);
  }
  .markdown :global(code > span.line.diff.remove) {
    background-color: rgba(167, 0, 27, 0.16);
    opacity: 0.7;
  }
  .markdown :global(code > span.line.diff)::before {
    content: '+';
    color: rgb(72, 226, 152);
    position: absolute;
    left: 0.25rem;
  }
  .markdown :global(code > span.line.diff.remove)::before {
    content: '-';
    color: rgb(213, 121, 121);
  }

  .markdown :global(ul) {
    @apply text-base pl-8 list-square;
  }

  .markdown :global(ol) {
    @apply text-base pl-8 list-decimal;
  }

  .markdown :global(kbd) {
    @apply text-xs inline-block rounded border px-1 py-05 align-middle font-normal font-mono shadow;
  }

  .markdown :global(table) {
    @apply text-base border-gray-600;
  }

  .markdown :global(th) {
    @apply border py-1 px-3;
  }

  .markdown :global(td) {
    @apply border py-1 px-3;
  }

  /* ref: https://github.com/gladevise/remark-link-card */
  .markdown :global(.rlc-container) {
    @apply w-full xl:max-h-[120px] mx-auto text-gray-900 flex
           hover:-translate-x-[3px] hover:-translate-y-[3px] hover:no-underline;

    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(17,24,39)' /></svg>")
      2;
  }

  :global(.dark) .markdown :global(.rlc-container) {
    @apply text-gh-dimmed-text;
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(173,186,199)' /></svg>");
  }

  .markdown :global(.rlc-info) {
    @apply overflow-hidden p-4 flex-[4_1_100px] text-left flex flex-col justify-between
           border-r-4 border-gray-900;
  }

  :global(.dark) .markdown :global(.rlc-info) {
    @apply border-gh-dimmed-text;
  }

  .markdown :global(.rlc-title) {
    @apply text-xl line-clamp-2 xl:line-clamp-1;
  }

  .markdown :global(.rlc-description) {
    @apply text-sm text-gray-500 whitespace-nowrap overflow-hidden overflow-ellipsis mt-1;
  }

  .markdown :global(.rlc-url-container) {
    @apply text-sm text-gray-500 flex items-center mt-1;
  }

  .markdown :global(.rlc-favicon) {
    @apply mr-2 w-4 h-4;
  }

  .markdown :global(.rlc-url) {
    @apply text-sm overflow-ellipsis whitespace-nowrap overflow-hidden;
  }

  .markdown :global(.rlc-image-container) {
    @apply relative flex-[1_1_100px];
  }

  .markdown :global(.rlc-image) {
    @apply object-cover w-full h-full;
  }

  /* ref: https://github.com/ipikuka/remark-flexible-containers */
  .markdown :global(div.remark-container) {
    @apply border-l-4 border-kodot-blue py-2 px-4;
  }
  .markdown :global(div.remark-container > *):not(:last-child) {
    @apply mt-0 mb-4;
  }

  .markdown :global(div.remark-container > .remark-container-title) {
    @apply text-kodot-blue text-base block mb-2;
  }
  .markdown :global(div.remark-container > .remark-container-title)::before {
    content: '';
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0,0,16,16'><path d='m5,1h6v1h1v1h1v1h1v1h1v6h-1v1h-1v1h-1v1h-1v1h-6v-1h-1v-1h-1v-1h-1v-1h-1v-6h1v-1h1v-1h1v-1h1zm3,3h-1v2h2v-2zm0,3h-1v5h2v-5z' fill='rgb(71,140,191)'/></svg>");
    @apply inline-block w-4 h-4 mr-2 bg-[0px_1px] bg-no-repeat;
  }

  .markdown :global(div.remark-container.warning) {
    @apply border-[#bf7b47];
  }
  .markdown :global(div.remark-container.warning > .remark-container-title) {
    @apply text-[#bf7b47];
  }
  .markdown
    :global(div.remark-container.warning > .remark-container-title)::before {
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0,0,16,16'><path d='m7,1h2v1h1v2h1v2h1v2h1v2h1v2h1v2h-1v1h-12v-1h-1v-2h1v-2h1v-2h1v-2h1v-2h1v-2h1zm1,4h-1v5h2v-5zm0,6h-1v2h2v-2z' fill='rgb(191,123,71)'/></svg>");
  }

  .markdown :global(div.remark-container.caution) {
    @apply border-[#bf474f];
  }
  .markdown :global(div.remark-container.caution > .remark-container-title) {
    @apply text-[#bf474f];
  }
  .markdown
    :global(div.remark-container.caution > .remark-container-title)::before {
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0,0,16,16'><path d='m5,1h6v1h1v1h1v1h1v1h1v6h-1v1h-1v1h-1v1h-1v1h-6v-1h-1v-1h-1v-1h-1v-1h-1v-6h1v-1h1v-1h1v-1h1zm3,3h-1v5h2v-5zm0,6h-1v2h2v-2z' fill='rgb(191,71,79)'/></svg>");
  }

  .markdown :global(details.remark-container) {
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(17,24,39)' /></svg>")
      2;
    background-clip: padding-box;
  }
  :global(.dark) .markdown :global(details.remark-container) {
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(173,186,199)' /></svg>");
  }

  .markdown :global(details.remark-container > *) {
    @apply px-4;
  }

  .markdown :global(details.remark-container > summary) {
    @apply border-b-4 border-current py-2;
  }

  .markdown :global(details.remark-container > *:not(summary):first-of-type) {
    @apply pt-2;
  }
  .markdown :global(details.remark-container > *:not(summary):last-of-type) {
    @apply pb-2;
  }

  /* ref: https://timneubauer.dev/blog/copy-code-button-in-astro/ */
  .markdown :global(.copy-code) {
    @apply absolute top-0 right-0 py-1 px-2 text-xs leading-4 font-ps2;
  }

  /* remark-mermaid */
  .markdown :global(.remark-mermaid) {
    background-color: #2d333b;
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2z' fill='rgb(45,51,59)' /></svg>")
      2;
    background-clip: padding-box;
  }

  .markdown :global(.remark-mermaid > svg) {
    @apply m-auto;
  }
</style>
