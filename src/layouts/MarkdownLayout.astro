---
import type { Render } from 'astro:content'
import { Icon } from 'astro-icon'
import BaseLayout from '@/layouts/BaseLayout.astro'
import PixelContainer from '@/components/PixelContainer.astro'

import '@fontsource/m-plus-1-code'

interface Props {
  rendered: Awaited<Render['.md']>
}

const { Content, headings } = Astro.props.rendered

const filteredHeadings = headings.filter(({ depth }) => depth <= 2)
---

<BaseLayout>
  <div class="flex flex-wrap m-4">
    <PixelContainer class="flex-1 min-w-0 p-4">
      <img
        class="w-full h-40 md:h-60 lg:h-80 xl:h-96 object-cover"
        src="/800x450.png"
        alt="Card image"
      />
      <div class="flex flex-col items-center">
        <div class="text-2xl font-bold mt-6">タイトルサンプル</div>
        <div class="mt-4 flex flex-wrap items-center font-pixelify">
          <div class="flex items-center mr-4">
            <Icon
              name="clock"
              class="h-4 w-4 mr-1 text-godot"
              alt="clock icon"
            />
            <span>2023-11-11</span>
          </div>
          <div class="flex items-center mr-4">
            <Icon
              name="updated"
              class="h-4 w-4 mr-1 text-godot"
              alt="clock icon"
            />
            <span>2023-11-22</span>
          </div>
          <div class="flex items-center">
            <Icon
              name="kodot-solid"
              class="h-4 w-4 mr-1 text-godot"
              alt="kodot icon"
            />
            <span>v4.1.3</span>
          </div>
        </div>
      </div>
      <div class="mt-4 markdown">
        <Content />
      </div>
    </PixelContainer>
    <PixelContainer
      class="w-60 ml-4 self-start sticky top-4 max-h-[calc(100vh-theme(spacing.8))] overflow-y-auto hidden lg:block"
    >
      <div class="p-4">
        <span>目次</span>
        <ul class="mt-4 list-square pl-4 leading-tight">
          {
            filteredHeadings.map(({ slug, text }) => (
              <li class="[&:not(:first-child)]:mt-1">
                <a class="hover:text-godot" href={'#' + slug}>
                  {text}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </PixelContainer>
  </div>
</BaseLayout>

<style>
  /* ref: https://github.com/iandinwoodie/github-markdown-tailwindcss/ */
  .py-05 {
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
  }

  .markdown {
    @apply text-gray-900 leading-normal break-words;
  }

  :global(.dark) .markdown {
    @apply text-gh-dimmed-text;
  }

  .markdown > :global(* + *) {
    @apply mt-0 mb-4;
  }

  .markdown :global(li + li) {
    @apply mt-1;
  }

  .markdown :global(li) > :global(p + p) {
    @apply mt-6;
  }

  .markdown :global(strong) {
    @apply font-semibold;
  }

  .markdown :global(a) {
    @apply text-godot font-semibold;
  }

  .markdown :global(strong) :global(a) {
    @apply font-bold;
  }

  .markdown :global(h1) {
    @apply leading-tight border-b text-4xl font-semibold mb-4 mt-6 pb-2;
  }

  .markdown :global(h2) {
    @apply leading-tight border-b text-2xl font-semibold mb-4 mt-6 pb-2;
  }

  .markdown :global(h3) {
    @apply leading-snug text-lg font-semibold mb-4 mt-6;
  }

  .markdown :global(h4) {
    @apply leading-none text-base font-semibold mb-4 mt-6;
  }

  .markdown :global(h5) {
    @apply leading-tight text-sm font-semibold mb-4 mt-6;
  }

  .markdown :global(h6) {
    @apply leading-tight text-sm font-semibold text-gray-600 mb-4 mt-6;
  }

  .markdown :global(blockquote) {
    @apply text-base border-l-4 border-gray-300 pl-4 pr-4 text-gray-600;
  }

  .markdown :global(.remark-code-title) {
    @apply text-sm px-5;
    font-family: 'M PLUS 1 Code', sans-serif;
  }

  .markdown :global(code) {
    @apply text-sm inline bg-gray-200 rounded px-1 py-05;
    font-family: 'M PLUS 1 Code', sans-serif;
  }

  .markdown :global(pre) {
    @apply bg-gray-100 p-4;
    border-width: 4px;
    border-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2zm1,2h-1v2h2v-2z' fill='rgb(36,41,46)' /></svg>")
      2;
    background-clip: padding-box;
  }

  :global(.dark) .markdown :global(pre) {
    background-color: #2d333b !important;
    border-image-source: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='6'><path d='m2,0h2v2h2v2h-2v2h-2v-2h-2v-2h2zm1,2h-1v2h2v-2z' fill='rgb(45,51,59)' /></svg>");
  }

  .markdown :global(pre) :global(code) {
    @apply block bg-transparent p-0 overflow-visible rounded-none;
  }

  .markdown :global(ul) {
    @apply text-base pl-8 list-square;
  }

  .markdown :global(ol) {
    @apply text-base pl-8 list-decimal;
  }

  .markdown :global(kbd) {
    @apply text-xs inline-block rounded border px-1 py-05 align-middle font-normal font-mono shadow;
  }

  .markdown :global(table) {
    @apply text-base border-gray-600;
  }

  .markdown :global(th) {
    @apply border py-1 px-3;
  }

  .markdown :global(td) {
    @apply border py-1 px-3;
  }
</style>
